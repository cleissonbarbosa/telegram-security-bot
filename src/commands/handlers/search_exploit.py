import logging

import requests
from googletrans import Translator


async def search_exploit(vuln_id: str, language: str = "en") -> str:
    """
    Fetch exploit information for a given vulnerability ID (CVE).

    This function queries the CVE Details API (or another service providing exploit information)
    to retrieve details about a specific vulnerability identified by its CVE ID.

    Args:
        vuln_id (str): The CVE ID of the vulnerability to search for.
        language (str): The language to translate the response to (default is "en").

    Returns:
        str: A formatted string containing the vulnerability information, including its ID,
             description, and references. If no data is found, a message indicating that no
             vulnerability was found is returned. In case of an error during the request,
             an error message is returned.
    """
    translator = Translator()
    try:
        response = requests.get(f"https://cve.circl.lu/api/cve/{vuln_id}")
        if response.status_code == 200:
            logging.info(f"Exploit information found for {vuln_id}")
            data = response.json()
            if data:
                exploit_info = (
                    f"Vulnerability: {data['id']}\n"
                    f"Description: {data['summary']}\n"
                    f"References: {', '.join(data['references'])}"
                )
                logging.info(f"Exploit information: {exploit_info}")

                if language != "en":
                    try:
                        translated_info = translator.translate(
                            exploit_info, dest=language
                        ).text
                        return translated_info
                    except Exception as e:
                        logging.error(
                            f"Error translating exploit information: {str(e)}"
                        )
                        return f"‚ùå Error translating exploit information: {str(e)}"
                else:
                    return exploit_info
            else:
                logging.warning("No vulnerabilities found for this CVE.")
                error_msg = "No vulnerabilities found for this CVE."

                if language != "en":
                    translated_error_msg = translator.translate(
                        error_msg, dest=language
                    ).text
                    return f"‚ö†Ô∏è {translated_error_msg} üòê"
                else:
                    return f"‚ö†Ô∏è {error_msg} üòê"
        else:
            logging.error("Error fetching exploit information.")
            error_msg = "Error fetching exploit information."

            if language != "en":
                translated_error_msg = translator.translate(
                    error_msg, dest=language
                ).text
                return f"‚ùå {translated_error_msg} üòï"
            else:
                return f"‚ùå {error_msg} üòï"
    except Exception as e:
        logging.error(f"Error fetching exploit: {str(e)}")
        error_msg = "Error fetching exploit"

        if language != "en":
            translated_error_msg = translator.translate(error_msg, dest=language).text
            return f"‚ùå {translated_error_msg}: {str(e)}"
        else:
            return f"‚ùå {error_msg}: {str(e)}"
