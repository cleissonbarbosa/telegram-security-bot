import logging

import requests


async def search_exploit(vuln_id: str) -> str:
    """
    Fetch exploit information for a given vulnerability ID (CVE).

    This function queries the CVE Details API (or another service providing exploit information)
    to retrieve details about a specific vulnerability identified by its CVE ID.

    Args:
        vuln_id (str): The CVE ID of the vulnerability to search for.

    Returns:
        str: A formatted string containing the vulnerability information, including its ID,
             description, and references. If no data is found, a message indicating that no
             vulnerability was found is returned. In case of an error during the request,
             an error message is returned.
    """
    try:
        response = requests.get(f"https://cve.circl.lu/api/cve/{vuln_id}")
        if response.status_code == 200:
            logging.info(f"Exploit information found for {vuln_id}")
            data = response.json()
            if data:
                exploit_info = (
                    f"Vulnerability: {data['id']}\n"
                    f"Description: {data['summary']}\n"
                    f"References: {', '.join(data['references'])}"
                )
                logging.info(f"Exploit information: {exploit_info}")
                return exploit_info
            else:
                logging.warning("No vulnerabilities found for this CVE.")
                return "‚ö†Ô∏è No vulnerabilities found for this CVE. üòê"
        else:
            logging.error("Error fetching exploit information.")
            return "‚ùå Error fetching exploit information. üòï"
    except Exception as e:
        logging.error(f"Error fetching exploit: {str(e)}")
        return f"‚ùå Error fetching exploit: {str(e)}"
